<?php

function rotate(&$word, $n)  //циклически сдвинем $n последних букв на 1 позицию влево
{
    $last_letter_position = strlen($word) - 1;      //необходимо знать позиции "первой" и последней буквы в слове
    $first_letter_position = strlen($word) - $n;

    $first_letter = $word[ $first_letter_position ];   //сохраняем первую букву, которая исчезнет

    for ($i = $first_letter_position; $i < $last_letter_position; $i++) //сдвигаем $n последних букв на 1 позицию влево
       $word[ $i ] = $word[ $i + 1];

    $word[ $last_letter_position ] = $first_letter;  //первая буква при циклическом сдвиге должна стать последней - восстановим её
}

function doAnagram(string $word, int $length)   //составить комбинации букв в слове $word из ПОСЛЕДНИХ $length букв (предыдущие буквы зафиксированы)
{
    static $words;  //сохраним слова в статическую переменную, потому что мы не потеряем её значение при промежуточных вызовах ф-ии, а по-другому сохранить значение не получиться

    if($length == 1)    //со словом длиной в 1 букву
        return;         //составить комбинации нельзя - выйти

    if($length == 2){    //со словом длиной в 2 буквы
        $words[] = $word;

        rotate($word, $length);  //можно составить 2 комбинации

        $words[] = $word; //сохраним их (одну до, а другую - после перестановки букв)
    } else {            //если длина слова больше
        for($i = 0; $i < $length; $i++) { //тогда слово можно повернуть ($length - 1) раз, чтобы каждая из букв могла стать "первой" (зафиксировать "первую" букву)
            rotate($word, $length);

            doAnagram($word, $length - 1);  //потому что комбинации будем составлять со всеми буквами, кроме "первой" - уменьшаем кол-во букв, с которыми составлять комбинации, пока не дойдем до минимальной комбинации из 2-х букв - которую сразу сохраняем
        }
    }

    return $words;  //возвращаем сохраненные комбинации
}

var_dump( doAnagram("ABCD", 4) );