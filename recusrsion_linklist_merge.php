<?php

include "linked_list.php";

function merge($A, $B)
{
    //Ф-ия выбирает наименьшие элементы из двух списков:
    //1, 8, 22, 40
    //4. 11. 16. 20

    //Каждый раз рекурсивно доходя до наибольшего элмеента из всех списков - получится цепочка вызовов:
    //1 -> 4 -> 8 -> 11 -> 16 -> 20 -> 22 -> 40

    if($A == null) return $B;
    if($B == null) return $A;   //когда элементы в списке заканчиваются - ф-ия возвращает НАИБОЛЬШИЙ элемент из списка (потому что списки уже отсортированы)...

    //1 4 8 11 16 20 22 <- (40)  - т.е. текущий элемент 40 возвращается

    if($A->data < $B->data) {
        //$A - ПРЕДЫДУЩИЙ элемент / он МЕНЬШЕ чем $B
        //merge($A->next, $B) - следующий элемент - ...т.е. НАИБОЛЬШИЙ элемент из списка (когда рекурсия закончилась - if($A == null) return $B) возвращается и считается СЛЕДУЮЩИМ элементом
        //...но при этом мы находимся на ПРЕДЫДУЩЕМ элементе (который МЕНЬШЕ)

        //1. Поскольку нужно отсортировать элементы по возрастанию
        //2. Тогда МЕНЬШИЙ  элемент будет первым ($A) (т.е. ПРЕДЫДУЩИМ),
        //3. а после него должен идти больший элемент (тот, который возвращается ф-ией merge($A->next, $B) - это будет СЛЕДУЮЩИЙ после $А ($A->next) элемент)
        $A->next = merge($A->next, $B);  //merge($A->next - переходим к следующему элементу из списка
        return $A;

        //1 4 8 11 16 20 (22) -> [40]     - теперь (22) - ПРЕДЫДУЩИЙ ($A) элемент, а элемент [40] вернули, связываем ПРЕДЫДУЩИЙ элемент со СЛЕДУЮЩИМ (который вернули): (22) -> [40]
        //1 4 8 11 16 (20) -> [22]        - при следующем возврате ПРЕДЫДУЩИМ ($A) будет элемент (20), а вернем СЛЕДУЮЩИЙ элемент [22] - свяжем их также: (20) -> [22]
        //(1) -> [4]     => 1             - в результате останется элемент (1), которыймы вернем - он будет началом нового списка
    } else {
        //$В - предыдущий элемент / он МЕНЬШЕ чем $A
        //merge($В->next, $А) - следующий элемент
        //здесь так же...

        $B->next = merge($A, $B->next);
        return $B;
    }
}


$list_1 = new LinkedList( $item_0 );
$list_1->insertFirst(30, 30);
$list_1->insertFirst(20, 20);
$list_1->insertFirst(10, 10);


$list_2 = new LinkedList( );
$list_2->insertFirst(35, 35);
$list_2->insertFirst(25, 25);
$list_2->insertFirst(15, 15);
$list_2->insertFirst(5, 5);


var_dump( merge($list_1->first, $list_2->first) );